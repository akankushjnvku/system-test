# Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
search test {
    document test {

        field id type int {
            indexing: summary
        }
        field x_512_float type tensor<float>(d0[256],d2[512]) {
            indexing: summary | attribute
        }
        field x_1024_float type tensor<float>(d0[256],d2[1024]) {
            indexing: summary | attribute
        }
        field x_512_double type tensor<double>(d0[256],d2[512]) {
            indexing: summary | attribute
        }
        field x_512_float_non_inner type tensor<float>(d0[256],d1[512]) {
            indexing: summary | attribute
        }

    }

    document-summary no_summary {
        summary id type int {
            source: id
        }
    }

    constant w_512_float {
        file: searchdefinitions/w_512.json
        type: tensor<float>(d1[256],d2[512])
    }
    constant w_1024_float {
        file: searchdefinitions/w_1024.json
        type: tensor<float>(d1[256],d2[1024])
    }
    constant w_512_double {
        file: searchdefinitions/w_512.json
        type: tensor<double>(d1[256],d2[512])
    }
    constant w_512_float_non_inner {
        file: searchdefinitions/w_512_non_inner.json
        type: tensor<float>(d1[512],d2[256])
    }
    constant b_float {
        file: searchdefinitions/b.json
        type: tensor<float>(d1[256])
    }

    rank-profile matrix_product_512_float {
        first-phase { expression: sum(reduce(join(attribute(x_512_float), constant(w_512_float), f(a,b)(a * b)), sum, d2)) }
    }

    rank-profile matrix_product_1024_float {
        first-phase { expression: sum(reduce(join(attribute(x_1024_float), constant(w_1024_float), f(a,b)(a * b)), sum, d2)) }
    }

    rank-profile matrix_product_512_double {
        first-phase { expression: sum(reduce(join(attribute(x_512_double), constant(w_512_double), f(a,b)(a * b)), sum, d2)) }
    }

    rank-profile matrix_product_512_float_non_inner {
        first-phase { expression: sum(reduce(join(attribute(x_512_float_non_inner), constant(w_512_float_non_inner), f(a,b)(a * b)), sum, d1)) }
    }

    rank-profile gemm_512_float {
        first-phase { expression: sum(join(reduce(join(attribute(x_512_float), constant(w_512_float), f(a,b)(a * b)), sum, d2) * 1.1, constant(b_float) * 1.2, f(a,b)(a+b))) }
    }

    rank-profile gemm_512_float_inline_join {
        first-phase { expression: sum(join(reduce(join(attribute(x_512_float), constant(w_512_float), f(a,b)(a * b)), sum, d2), constant(b_float), f(a,b)(1.1*a + 1.2*b))) }
    }

}

